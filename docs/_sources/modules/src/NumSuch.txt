.. default-domain:: chpl

.. module:: NumSuch
   :synopsis: View NumSuch `on Github <https://github.com/buddha314/numsuch>`_

NumSuch
=======
**Usage**

.. code-block:: chapel

   use NumSuch;


View NumSuch `on Github <https://github.com/buddha314/numsuch>`_

In NumSuch, matrices are considered sparse until proven otherwise.



.. iterfunction:: iter indexSort(arr, idx, reverse = false)

   
     Sort an array ``arr`` according to the values in the array ``idx``
   
     :arg arr: The array to be sorted
     :arg idx: The indexing array
     :arg reverse: Boolean indicating whether ``idx`` should be considered in reverse order. Default is ``false``
   
     :returns: An iterator producing elements of ``arr`` sorted by values in ``idx``
   
   examples::
   
     const Arr = [7, 10, 23, 1];
     const Idx = [2.2, 3.3, 1.1, 4.4];
   
     for a in indexSort(arr=Arr, idx=Idx) {
       writeln(a);
     }
     > 23
     > 7
     > 10
     > 1
   
     for a in indexSort(arr=Arr, idx=Idx, reverse=true) {
       writeln(a);
     }
   
     > 1
     > 10
     > 7
     > 23
   
     

.. class:: BiMap

   
   Class to hold a <string, int> bimap.  This class does NOT enforce uniqueness but
   will skip duplicate keys.
    


   .. attribute:: var keys: domain(string)

   .. attribute:: var ids: [keys] int

   .. attribute:: var idxkey: domain(int)

   .. attribute:: var idx: [idxkey] string

   .. method:: proc init()

      
      Create an empty BiMap.
      

   .. method:: proc add(k: string)

      
      Add string key, gives it the id based on when it entered.
      
      :arg k string: The string <e.g. key> to add to the BiMap
      

   .. method:: proc add(k: string, v: int)

      
      Add a key with a given ID.  Must be done in serial.  But it begs the question: Do I need
      to have the feature ids if they have to be done in serial?
       

   .. method:: proc get(k: string)

      
      Send in a string, get an integer back.
       

   .. method:: proc get(v: int)

      
      Put in an integer, return a string
       

   .. itermethod:: iter entries()

      
      Iterator return tuples of (key, value)
      

   .. method:: proc size()

      
      How many entries?
       

   .. method:: proc max()

      
      Returns the max value for "value", assuming it's a real number
      

   .. itermethod:: iter sorted()

   .. method:: proc uni(b: BiMap)

