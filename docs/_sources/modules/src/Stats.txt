.. default-domain:: chpl

.. module:: Stats

Stats
=====
**Usage**

.. code-block:: chapel

   use Stats;

.. class:: ECDF

   
   Trying to make this as close as possible to the `SciPy Version <http://www.statsmodels.org/stable/_modules/statsmodels/distributions/empirical_distribution.html#ECDF>`_
    


   .. attribute:: var nobs: int

   .. attribute:: var odom = {1..nobs}

   .. attribute:: var dist: [odom] real

   .. attribute:: var mx: real

   .. method:: proc init(x: [])

   .. method:: proc this(x: [])

   .. method:: proc this(x: real)

   .. method:: proc findPosition(y)

.. function:: proc factorial(k: int)

   
   Wrapper for BigInt.fac provided by Chapel.
   

.. function:: proc dpois(n: int, l: real)

   
   The Poisson distribution.  Designed after https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Poisson.html
   
   Find the the density of an integer n from a random Poisson X with lambda = l
   

.. function:: proc rpois(n: int, l: real)

   
   Generate n random values from a Poisson rv with intensity lambda = l
   based on the first version here: https://en.wikipedia.org/wiki/Poisson_distribution#Generating_Poisson-distributed_random_variables
    

.. function:: proc rpois(l: real)

   
   Generate a single Poisson random variable
   

.. function:: proc dgamma(x: real, shape: real, scale: real)

   
   The Gamma distribution, density function
   

.. function:: proc rgamma()

   
   The Gamma distribution, random generation.
   
   From this paper? https://arxiv.org/pdf/1304.3800.pdf
   Or maybe this one, includes C code: http://www.hongliangjie.com/2012/12/19/how-to-generate-gamma-random-variables/
   
   :TODO: Finish the Gamma distribution
   

.. function:: proc choice(a: [] ?t, size = 1, replace = true)

   
   Routine to choose from a set, hopefully follwing this:
   https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.random.choice.html
   
   :returns: array of choices, size
    

.. function:: proc choice(a: [] ?t, size = 1, replace = true, p: [] ?u)

.. function:: proc chooseMultinomial(a: [] ?t, size: int, replace = true, p: [] real)

   
   Well, I'll be damned. This is what I came up with over a cup of coffee
   https://en.wikipedia.org/wiki/Multinomial_distribution#Sampling_from_a_multinomial_distribution
    

.. function:: proc randInt(a: int, b: int)

   
   Returns a random integer between `a <= N <= b`
   

.. function:: proc rand(a: real, b: real)

   Get a random number drawn uniformly along [a,b] 

.. function:: proc seq(start: int, stop: int, stride: int = 1)

   Returns a sequence as an integer array from a to b, inclusive 

.. function:: proc nds(n: int, s: int)

   
   Returns the sum of rolling `n` `s`-sided dice.  E.g. n=3, s=6, is three six sided die
   

